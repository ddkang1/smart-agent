#!/bin/bash

# Set up the environment for Smart Agent

# Create the required directories if they don't exist
mkdir -p config
mkdir -p python_repl_storage

# Check if we have either example files or config files
if [ ! -f config/config.yaml.example ] && [ ! -f config/config.yaml ]; then
    echo "Error: No config.yaml or config.yaml.example found. Cannot proceed with setup."
    exit 1
fi

if [ ! -f config/tools.yaml.example ] && [ ! -f config/tools.yaml ]; then
    echo "Error: No tools.yaml or tools.yaml.example found. Cannot proceed with setup."
    exit 1
fi

# Create config files from examples if they don't exist
if [ ! -f config/config.yaml ] && [ -f config/config.yaml.example ]; then
    cp config/config.yaml.example config/config.yaml
    echo "Created config/config.yaml from example template"
    
    # Prompt for API key to insert directly into config.yaml
    echo "Please enter your API key for the configured model:"
    read -s API_KEY
    echo
    
    if [ -n "$API_KEY" ]; then
        # Replace the empty api_key with the provided key
        sed -i '' "s/api_key: \"\"/api_key: \"$API_KEY\"/" config/config.yaml
        echo "Updated API key in config.yaml"
    fi
fi

# Create tools.yaml if it doesn't exist
if [ ! -f config/tools.yaml ] && [ -f config/tools.yaml.example ]; then
    cp config/tools.yaml.example config/tools.yaml
    echo "Created config/tools.yaml from example template"
fi

# Create litellm_config.yaml if it doesn't exist
if [ ! -f config/litellm_config.yaml ] && [ -f config/litellm_config.yaml.example ]; then
    cp config/litellm_config.yaml.example config/litellm_config.yaml
    echo "Created config/litellm_config.yaml from example template"
elif [ ! -f config/litellm_config.yaml ] && [ -f config/config.yaml ]; then
    # Generate litellm_config.yaml from config.yaml
    api_base_url=$(grep "base_url:" config/config.yaml | awk '{print $2}' | tr -d '"'"'" )
    model_name=$(grep "name:" config/config.yaml | awk '{print $2}' | tr -d '"'"'" )
    
    cat > config/litellm_config.yaml << EOL
# LiteLLM Configuration for Smart Agent
# This file is automatically generated based on your config.yaml settings

model_list:
  - model_name: ${model_name}
    litellm_params:
      model: anthropic/claude-3-sonnet-20240229
      api_key: \${ANTHROPIC_API_KEY}

  - model_name: gpt-4
    litellm_params:
      model: openai/gpt-4
      api_key: \${OPENAI_API_KEY}

  - model_name: gpt-3.5-turbo
    litellm_params:
      model: openai/gpt-3.5-turbo
      api_key: \${OPENAI_API_KEY}

# Server configuration
server:
  port: 4000
  host: 0.0.0.0

# Routing configuration
router:
  timeout: 30
  routing_strategy: simple-shuffle

# Logging configuration
litellm_settings:
  success_callback: ["langfuse"]
  failure_callback: ["langfuse"]
EOL
    echo "Created config/litellm_config.yaml with settings based on config.yaml"
fi

# Create storage directories based on tools.yaml
if [ -f config/tools.yaml ]; then
    # Extract storage paths from tools.yaml
    storage_paths=$(grep "storage_path:" config/tools.yaml | awk '{print $2}' | tr -d '"'"'")
    
    # Create each storage directory
    for path in $storage_paths; do
        if [ ! -d "$path" ]; then
            mkdir -p "$path"
            echo "Created storage directory: $path"
        fi
    done
fi

echo "Environment setup complete. You can now run Smart Agent using:"
echo "  - smart-agent chat                      # Start chat session"
echo "  - smart-agent start                     # Start all services"
echo "  - smart-agent start --tools             # Start only tool services"
echo "  - smart-agent start --proxy             # Start only the LiteLLM proxy"
echo "  - smart-agent stop                      # Stop all services"
